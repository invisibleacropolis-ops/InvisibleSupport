{\rtf1\fbidis\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Courier New;}{\f1\fnil\fcharset1 Segoe UI Emoji;}{\f2\fnil Courier New;}{\f3\fnil\fcharset1 Segoe UI Symbol;}}
{\colortbl ;\red0\green0\blue255;}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\f0\fs22 # AI Story Generator - Complete User Manual\par
\par
## Table of Contents\par
1. [Getting Started](#getting-started)\par
2. [Training Tab](#training-tab)\par
3. [Generate Stories Tab](#generate-stories-tab)\par
4. [Feedback & Improvement Tab](#feedback-improvement-tab)\par
5. [Settings Tab](#settings-tab)\par
6. [Tips & Best Practices](#tips-best-practices)\par
7. [Troubleshooting](#troubleshooting)\par
\par
---\par
\par
## Getting Started\par
\par
### First Time Setup\par
\par
1. **Install Required Packages** (one-time only):\par
   ```bash\par
   pip install numpy tensorflow python-docx PyPDF2\par
   ```\par
\par
2. **Launch the Application**:\par
   - Double-click `story_generator.py` OR\par
   - Run from terminal: `python story_generator.py`\par
\par
3. **Debug Log**:\par
   - A popup will show you the debug log file location\par
   - Check this file if anything goes wrong\par
   - Format: `story_generator_debug_YYYYMMDD_HHMMSS.log`\par
\par
### System Requirements\par
- **RAM**: 4GB minimum, 8GB+ recommended\par
- **Disk Space**: 500MB for software, plus space for models (50-200MB each)\par
- **CPU**: Any modern processor (GPU not required)\par
- **Python**: 3.7 or higher\par
\par
---\par
\par
## Training Tab\par
\par
This is where you train your AI model on your story collection.\par
\par
### Adding Story Files\par
\par
**Supported Formats**:\par
- `.txt` - Plain text files\par
- `.docx` - Microsoft Word documents\par
- `.pdf` - PDF documents\par
\par
**How to Add Files**:\par
1. Click **"Add Files"** button\par
2. Select one or multiple files (hold Ctrl/Cmd to select multiple)\par
3. Files appear in the list below\par
4. Click **"Clear All"** to remove all files and start over\par
\par
**Tips**:\par
- Add at least 5-10 stories for decent results\par
- More stories = better quality (but slower training)\par
- Stories should be similar in style/genre for best coherence\par
\par
### Training Parameters\par
\par
#### **Epochs** (Default: 50)\par
- **What it is**: Number of times the AI reads through your entire dataset\par
- **Range**: 10-200\par
- **Recommendations**:\par
  - Small dataset (5-10 stories): 30-50 epochs\par
  - Medium dataset (20-50 stories): 40-60 epochs\par
  - Large dataset (50+ stories): 50-100 epochs\par
- **Higher = Better learning** (but diminishing returns after ~60)\par
\par
#### **Sequence Length** (Default: 50)\par
- **What it is**: How many words/characters the AI looks at for context\par
- **Range**: 20-100\par
- **Recommendations**:\par
  - Word mode: 40-60 is ideal\par
  - Character mode: 50-100 is ideal\par
- **Higher = Better context** (but slower and more memory-intensive)\par
\par
#### **Mode**\par
- **Word-level** (Recommended):\par
  - Faster training\par
  - More coherent output\par
  - Better for most story types\par
  - Larger vocabulary size\par
  \par
- **Character-level**:\par
  - Slower training\par
  - Can create new words\par
  - Better for poetry or experimental writing\par
  - Good for non-English languages with complex words\par
\par
### Training Process\par
\par
1. **Click "Start Training"** button\par
2. **Watch the progress bar** - shows training completion\par
3. **Monitor the log** - displays:\par
   - File loading progress\par
   - Vocabulary size\par
   - Training samples count\par
   - Epoch-by-epoch loss and accuracy\par
4. **Wait for completion** - can take 15 minutes to several hours\par
\par
**Training Time Estimates** (CPU):\par
- 10 stories, 30 epochs: ~20-30 minutes\par
- 30 stories, 50 epochs: ~1-2 hours\par
- 50+ stories, 50 epochs: ~3-5 hours\par
\par
**During Training**:\par
- Progress bar shows % completion\par
- Loss should decrease over time (good!)\par
- Accuracy should increase over time (good!)\par
- You can use other apps while training\par
\par
\f1\u9888?\u-497?\f2  \f0 **Important**: Don't close the application during training or you'll lose progress!\par
\par
---\par
\par
## Generate Stories Tab\par
\par
Once training is complete, generate new stories here.\par
\par
### Seed Text\par
\par
**What it is**: The starting text that prompts the AI to continue the story\par
\par
**How to use**:\par
- Type your opening line in the text box\par
- Can be a few words or several sentences\par
- The AI will continue from this point\par
\par
**Examples**:\par
- "Once upon a time in a distant galaxy"\par
- "The detective examined the crime scene carefully"\par
- "Sarah woke up to find her house had disappeared"\par
\par
**Tips**:\par
- Match the style of your training data\par
- Be specific to guide the story direction\par
- Shorter seeds = more creative freedom\par
- Longer seeds = more constrained continuation\par
\par
### Generation Parameters\par
\par
#### **Length** (Default: 500)\par
- **What it is**: How many words (word mode) or characters (char mode) to generate\par
- **Range**: 100-2000\par
- **Recommendations**:\par
  - Short scene: 200-400\par
  - Full story: 500-1000\par
  - Long story: 1000-2000\par
\par
#### **Temperature** (Default: 0.8)\par
- **What it is**: Controls randomness/creativity\par
- **Range**: 0.3-1.5\par
- **Scale**:\par
  - **0.3-0.5**: Very predictable, safe, repetitive\par
  - **0.6-0.8**: Balanced creativity (recommended)\par
  - **0.9-1.2**: Very creative, unexpected\par
  - **1.3-1.5**: Chaotic, might not make sense\par
\par
**Experimentation Guide**:\par
- Start at 0.8\par
- Too boring? Increase by 0.1\par
- Too random? Decrease by 0.1\par
- Find your sweet spot!\par
\par
### Generating Stories\par
\par
1. **Enter seed text**\par
2. **Adjust parameters**\par
3. **Click "Generate Story"**\par
4. **Wait 2-10 seconds** (generation is fast!)\par
5. **Story appears** in the text box below\par
\par
### Story Management\par
\par
**Copy to Clipboard**:\par
- Copies entire story for pasting elsewhere\par
- Use in Word, email, note apps, etc.\par
\par
**Save to File**:\par
- Saves as `.txt` file\par
- Choose location and filename\par
- Great for building a collection\par
\par
---\par
\par
## Feedback & Improvement Tab\par
\par
This is where you teach the AI to improve based on your preferences.\par
\par
### Why Use Feedback?\par
\par
The initial training teaches the AI your story style, but feedback helps it:\par
- Learn what you specifically like/dislike\par
- Improve weak areas\par
- Adapt to your preferences over time\par
- Get better with each iteration\par
\par
### How to Submit Feedback\par
\par
#### Step 1: Load a Story\par
- Click **"Load from Generation Tab"** to get your last generated story\par
- Or paste any generated story directly into the text box\par
\par
#### Step 2: Rate the Story (1-5 Stars)\par
- **1 Star**: Terrible, incoherent, unusable\par
- **2 Stars**: Poor quality, many problems\par
- **3 Stars**: Acceptable, some issues\par
- **4 Stars**: Good quality, minor improvements needed\par
- **5 Stars**: Excellent, exactly what you want\par
\par
**Rating Impact**:\par
- Higher ratings (4-5): AI learns to do MORE like this\par
- Lower ratings (1-2): AI learns to AVOID this style\par
- Use the full scale for best results\par
\par
#### Step 3: Provide Corrections (Optional but Powerful!)\par
- Edit the story to how it SHOULD be\par
- Fix grammar, plot holes, style issues\par
- Rewrite sections you didn't like\par
- The AI learns from your corrections\par
\par
**Correction Examples**:\par
- Original: "The dragon flied over the castle"\par
- Corrected: "The dragon flew over the ancient castle"\par
\par
- Original: "He was happy. He smiled. He laughed."\par
- Corrected: "He was so happy that a wide smile spread across his face, and he laughed heartily."\par
\par
#### Step 4: Submit\par
- Click **"Submit Feedback"**\par
- See your feedback statistics update\par
- Feedback is saved for fine-tuning\par
\par
### Feedback Statistics\par
\par
Shows:\par
- **Total feedback**: Number of stories you've rated\par
- **Average rating**: Your overall satisfaction level\par
\par
Build up 5-10 feedback samples before fine-tuning for best results.\par
\par
### Improving the Model\par
\par
Once you have feedback accumulated:\par
\par
1. **Set Fine-tune Epochs** (Default: 10)\par
   - 5-10 epochs: Quick improvement\par
   - 10-20 epochs: Deeper learning\par
   - More epochs = longer time but better integration\par
\par
2. **Click "Improve Model from Feedback"**\par
\par
3. **Watch progress bar** for completion\par
\par
4. **Model is now updated!** Generate new stories to see improvements\par
\par
**How Often to Fine-Tune**:\par
- After every 5-10 feedback submissions\par
- When you notice recurring issues\par
- Before generating important stories\par
\par
\f1\u9888?\u-497?\f2  \f0 **Note**: Fine-tuning modifies your model. Save it afterwards (Settings tab) to keep improvements!\par
\par
---\par
\par
## Settings Tab\par
\par
### External Generators\par
\par
#### Random Name Generator\par
- **Checkbox**: "Use Random Name Generator"\par
- **What it does**: Occasionally injects random character names during generation\par
- **Names included**: John, Jane, Alex, Sarah, Michael, Emma, David, Lisa (+ surnames)\par
- **When to use**: \par
  - \f3\u9989?\f2  \f0 Stories with multiple characters\par
  - \f3\u9989?\f2  \f0 When you want variety\par
  - \f3\u10060?\f2  \f0 Historical fiction with specific names\par
  - \f3\u10060?\f2  \f0 Stories where you control all names via seed text\par
\par
**How to Add Your Own Generators** (Advanced):\par
You can modify the code to add generators for:\par
- Place names\par
- Item names  \par
- Plot elements\par
- Anything else!\par
\par
### Model Management\par
\par
#### Save Model\par
1. Click **"Save Model"**\par
2. Choose a folder location (creates a new folder)\par
3. Three files are saved:\par
   - `preprocessor.pkl`: Vocabulary data\par
   - `model.keras`: Neural network weights\par
   - `feedback.json`: Your feedback history\par
\par
**Best Practices**:\par
- Save after training completes\par
- Save after fine-tuning\par
- Create descriptive folder names: `fantasy_model`, `scifi_model`, etc.\par
- Keep backups of good models\par
\par
#### Load Model\par
1. Click **"Load Model"**\par
2. Select the folder containing a saved model\par
3. Model loads instantly (no retraining needed!)\par
4. You can immediately generate stories\par
\par
**Use Cases**:\par
- Continue working on a previous session\par
- Switch between different genre models\par
- Share models with others\par
- Keep multiple specialized models\par
\par
### System Info\par
\par
Displays current model status:\par
- **Model Status**: Loaded or not loaded\par
- **Mode**: Word-level or character-level\par
- **Vocabulary Size**: Number of unique tokens the AI knows\par
- **Feedback Samples**: How many feedback submissions you have\par
\par
---\par
\par
## Tips & Best Practices\par
\par
### Training Tips\par
\par
**Quality Over Quantity**:\par
- 10 great stories > 50 mediocre stories\par
- Consistency in style/genre is crucial\par
- Proofread your training data (errors will be learned!)\par
\par
**Dataset Preparation**:\par
- Remove headers/footers from documents\par
- Remove page numbers\par
- Remove "The End" or similar markers\par
- Keep only the story text\par
- Use UTF-8 encoding for special characters\par
\par
**Training Strategy**:\par
- Start with a small test (5 stories, 20 epochs) to verify it works\par
- Then do your full training run\par
- Monitor the training log - loss should decrease steadily\par
- If loss stops decreasing, training is complete (can stop early)\par
\par
### Generation Tips\par
\par
**Seed Text Best Practices**:\par
- Match tense: If training data is past tense, use past tense\par
- Match perspective: 1st person vs 3rd person\par
- Set the scene clearly\par
- Include character names from your universe\par
\par
**Temperature Experimentation**:\par
- Generate the same seed at different temperatures\par
- Compare results\par
- Find what works for your use case\par
- Save your favorite temperature setting mentally\par
\par
**Batch Generation**:\par
- Generate multiple versions of the same seed\par
- Pick the best one\par
- Mix and match parts from different generations\par
\par
### Feedback Tips\par
\par
**Effective Rating**:\par
- Be consistent with your rating scale\par
- Don't rate everything 5 stars (AI won't learn)\par
- Don't rate everything 1 star (AI gets confused)\par
- Use 3 as baseline "acceptable"\par
\par
**Correction Strategies**:\par
- You don't need to correct EVERYTHING\par
- Focus on recurring issues\par
- Show the AI your preferred style\par
- Fix 2-3 stories thoroughly > rate 10 stories without corrections\par
\par
**Feedback Workflow**:\par
1. Generate 5-10 stories\par
2. Rate and correct them\par
3. Fine-tune the model\par
4. Generate new stories\par
5. Notice improvements\par
6. Repeat!\par
\par
### Workflow Recommendations\par
\par
**For Best Results**:\par
\par
1. **Initial Training** (One-time)\par
   - Collect 20-30 high-quality stories\par
   - Train with 50 epochs\par
   - Save the base model\par
\par
2. **First Generation Session**\par
   - Generate 10-20 stories\par
   - Experiment with temperatures\par
   - Note what works\par
\par
3. **Feedback Session**\par
   - Rate your generated stories\par
   - Correct 3-5 thoroughly\par
   - Fine-tune with 10 epochs\par
   - Save the improved model\par
\par
4. **Production Use**\par
   - Generate stories as needed\par
   - Occasionally provide feedback\par
   - Fine-tune monthly or as needed\par
\par
---\par
\par
## Troubleshooting\par
\par
### Application Won't Start\par
\par
**Error: "No module named 'numpy'" (or tensorflow, etc.)**\par
- Solution: Install packages: `pip install numpy tensorflow python-docx PyPDF2`\par
\par
**Error: "Tkinter not available"**\par
- Windows: Reinstall Python, ensure Tkinter is checked\par
- Linux: `sudo apt-get install python3-tk`\par
- Mac: Should work by default\par
\par
**Python not found**\par
- Add Python to PATH\par
- Reinstall Python with "Add to PATH" checked\par
\par
### Training Issues\par
\par
**Training is very slow**\par
- Normal on CPU! See time estimates above\par
- Reduce epochs or dataset size for testing\par
- Let it run overnight for full training\par
\par
**Training fails/crashes**\par
- Check debug log file for details\par
- Might need more RAM (try smaller dataset)\par
- Verify all story files are valid/readable\par
\par
**Loss not decreasing**\par
- Normal after many epochs (model has learned all it can)\par
- Try adding more diverse training data\par
- Or stop training (model is done)\par
\par
**"Out of memory" error**\par
- Reduce batch size (requires code modification)\par
- Use fewer/shorter training stories\par
- Close other applications\par
- Use character mode instead of word mode\par
\par
### Generation Issues\par
\par
**Stories are repetitive/boring**\par
- Increase temperature (try 1.0-1.2)\par
- Use more varied seed texts\par
- Add more diverse training data\par
\par
**Stories are nonsensical/chaotic**\par
- Decrease temperature (try 0.6-0.7)\par
- Use longer, more specific seed texts\par
- Train for more epochs\par
\par
**Stories don't match training style**\par
- Need more training data (20+ stories minimum)\par
- Ensure training data is consistent in style\par
- Check that seed text matches training data style\par
\par
**Generation is slow**\par
- Normal for longer outputs (500+ words)\par
- Character mode is slower than word mode\par
- First generation is slower (model initialization)\par
\par
### Feedback Issues\par
\par
**Fine-tuning not improving quality**\par
- Need more feedback samples (5-10 minimum)\par
- Provide corrections, not just ratings\par
- Make sure corrections are substantial\par
- Try more fine-tuning epochs (20 instead of 10)\par
\par
**Model got worse after feedback**\par
- Might have conflicting feedback\par
- Review your ratings for consistency\par
- Load a previous saved model\par
- Start fresh with new feedback\par
\par
### File Issues\par
\par
**Can't load DOCX files**\par
- Install python-docx: `pip install python-docx`\par
- Verify file isn't corrupted (try opening in Word)\par
- Try converting to TXT first\par
\par
**Can't load PDF files**\par
- Install PyPDF2: `pip install PyPDF2`\par
- Some PDFs are image-based (won't work)\par
- Try converting to TXT or DOCX first\par
\par
**Model won't save/load**\par
- Check folder permissions (write access needed)\par
- Ensure enough disk space (200MB per model)\par
- Don't use special characters in folder names\par
\par
---\par
\par
## Advanced Topics\par
\par
### Understanding the Model\par
\par
**What the AI learns**:\par
- Vocabulary (all words/characters in training data)\par
- Word patterns and sequences\par
- Sentence structure\par
- Story flow and pacing\par
- Style and tone\par
\par
**What the AI doesn't learn**:\par
- "Understanding" - it mimics patterns, doesn't comprehend\par
- Factual accuracy\par
- Long-term plot consistency\par
- Character memory beyond context window\par
\par
### Model Files Explained\par
\par
**preprocessor.pkl** (1-5 MB):\par
- Vocabulary dictionary\par
- Tokenization rules\par
- Mode (word/char)\par
- Must match the model.keras file\par
\par
**model.keras** (50-200 MB):\par
- Neural network weights (the "brain")\par
- All learned patterns\par
- Largest file\par
- Main result of training\par
\par
**feedback.json** (1 KB - 1 MB):\par
- Your ratings and corrections\par
- Used during fine-tuning\par
- Can be deleted if you want to start feedback fresh\par
\par
### Multiple Models Strategy\par
\par
Create separate models for:\par
- Different genres (fantasy, sci-fi, romance)\par
- Different tones (serious, humorous)\par
- Different perspectives (1st person, 3rd person)\par
- Different audiences (children, adults)\par
\par
Load the appropriate model for your current project!\par
\par
### Performance Optimization\par
\par
**For faster training**:\par
- Use word mode (not character)\par
- Lower sequence length (30-40)\par
- Use more RAM (8GB+)\par
- Close other applications\par
- Use SSD instead of HDD\par
\par
**For better quality**:\par
- More training data (30+ stories)\par
- More epochs (60-100)\par
- Higher sequence length (60-80)\par
- Consistent training data\par
- Regular feedback and fine-tuning\par
\par
---\par
\par
## Quick Reference\par
\par
### Recommended Settings for Common Use Cases\par
\par
**Quick Test Run**:\par
- Files: 3-5 stories\par
- Epochs: 20\par
- Sequence Length: 40\par
- Temperature: 0.8\par
- Training Time: ~10-15 minutes\par
\par
**Production Fantasy Novel Assistant**:\par
- Files: 30-50 fantasy novels\par
- Epochs: 60\par
- Sequence Length: 50\par
- Temperature: 0.7-0.9\par
- Training Time: ~3-5 hours\par
\par
**Children's Story Generator**:\par
- Files: 20+ children's books\par
- Epochs: 50\par
- Sequence Length: 40\par
- Temperature: 0.8\par
- Training Time: ~1-2 hours\par
\par
**Experimental/Poetry**:\par
- Files: 10-20 poems or experimental texts\par
- Epochs: 40\par
- Sequence Length: 60\par
- Mode: Character-level\par
- Temperature: 1.0-1.3\par
- Training Time: ~2-4 hours\par
\par
### Keyboard Shortcuts\par
\par
*Standard text editing shortcuts work in all text boxes:*\par
- Ctrl+C / Cmd+C: Copy\par
- Ctrl+V / Cmd+V: Paste\par
- Ctrl+A / Cmd+A: Select All\par
- Ctrl+Z / Cmd+Z: Undo\par
\par
---\par
\par
## Support & Resources\par
\par
**Debug Log**: Always check `story_generator_debug_YYYYMMDD_HHMMSS.log` first when troubleshooting\par
\par
**Common Issues**: See Troubleshooting section above\par
\par
**Python Documentation**: {{\field{\*\fldinst{HYPERLINK https://docs.python.org/3/ }}{\fldrslt{https://docs.python.org/3/\ul0\cf0}}}}\f0\fs22\par
\par
**TensorFlow Documentation**: {{\field{\*\fldinst{HYPERLINK https://www.tensorflow.org/ }}{\fldrslt{https://www.tensorflow.org/\ul0\cf0}}}}\f0\fs22\par
\par
---\par
\par
## Version Information\par
\par
**Current Version**: 1.0  \par
**Last Updated**: October 2025  \par
**Compatibility**: Python 3.7+, TensorFlow 2.x\par
\par
---\par
\par
## Tips for Success\par
\par
1. **Start small** - Test with a few stories before committing to a large training run\par
2. **Be patient** - Training takes time, but generation is fast\par
3. **Save often** - Save your model after training and after fine-tuning\par
4. **Experiment** - Try different temperatures, seeds, and settings\par
5. **Provide feedback** - The more feedback, the better your model becomes\par
6. **Keep backups** - Save multiple versions of your best models\par
7. **Have fun!** - This is a creative tool - experiment and enjoy!\par
\par
---\par
\par
*End of User Manual*\par
}
 